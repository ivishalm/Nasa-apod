{"version":3,"sources":["components/Navbar.js","components/Home.js","components/NasaPhotos.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Home","api_key","process","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","fetchPhoto","media_type","src","url","alt","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","App","component","path","exact","NasaPhots","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAYeA,EARA,WACX,OACI,yBAAKC,UAAU,UACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,kBCOGC,EAVF,WACT,OACI,oCACA,yBAAKF,UAAU,YACX,kBAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,OAAhC,0B,iCCFNG,EAAO,sDAAkDC,4CA+ChDC,EA7CG,WAAO,IAAD,EACcC,mBAAS,MADvB,mBACbC,EADa,KACFC,EADE,KAepB,OAZAC,qBAAU,WAAM,4CAIZ,8BAAAC,EAAA,sEACsBC,MAAMR,GAD5B,cACUS,EADV,gBAEuBA,EAAIC,OAF3B,OAEUC,EAFV,OAGIN,EAAaM,GAHjB,4CAJY,0DAEZC,KAQD,IAEER,EAGD,oCACI,kBAAC,EAAD,MACA,yBAAKP,UAAU,wBACX,yBAAKA,UAAU,cACe,UAAzBO,EAAUS,WACP,yBAAKC,IAAKV,EAAUW,IAAKC,IAAKZ,EAAUa,QAEpC,4BAAQH,IAAKV,EAAUW,IAAKG,YAAY,IACpCD,MAAM,cACNE,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACfxB,UAAU,WAI1B,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SAASO,EAAUa,OAClC,yBAAKpB,UAAU,QAAQO,EAAUkB,MACjC,yBAAKzB,UAAU,eAAeO,EAAUmB,gBAtBjC,+B,aCJZC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,UAAW1B,EAAM2B,KAAK,IAAIC,OAAK,IACtC,kBAAC,IAAD,CAAOF,UAAWG,EAAWF,KAAK,kBCDtBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7cc45b15.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <Link to=\"/\">Take me Home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n        <div className=\"home_btn\">\r\n            <Link to=\"/nasaphoto\" className=\"btn\">See into the stars!</Link>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport Navbar from './Navbar'\r\n\r\nconst api_key = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_KEY}`;\r\n\r\nconst NasaPhoto = () => {\r\n    const [photoData, setPhotoData] = useState(null)\r\n\r\n    useEffect(() => {\r\n\r\n        fetchPhoto();\r\n\r\n        async function fetchPhoto() {\r\n            const res = await fetch(api_key);\r\n            const data = await res.json();\r\n            setPhotoData(data);\r\n\r\n        }\r\n    }, [])\r\n\r\n    if (!photoData) return <div />;\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"container image-main\">\r\n                <div className=\"nasa-image\">\r\n                    {photoData.media_type === 'image' ? (\r\n                        <img src={photoData.url} alt={photoData.title} />\r\n                    ) : (\r\n                            <iframe src={photoData.url} frameBorder='0'\r\n                                title=\"space video\"\r\n                                gesture=\"media\"\r\n                                allow=\"encrypted-media\"\r\n                                allowFullScreen\r\n                                className=\"photo\"></iframe>\r\n                        )}\r\n\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"title\">{photoData.title}</div>\r\n                    <div className=\"date\">{photoData.date}</div>\r\n                    <div className=\"explanation\">{photoData.explanation}</div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NasaPhoto;","import React from 'react';\nimport Home from './components/Home';\nimport NasaPhots from './components/NasaPhotos';\n\nimport { BrowserRouter, Route} from 'react-router-dom';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Route component={Home} path=\"/\" exact />\n        <Route component={NasaPhots} path=\"/nasaphoto\" />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}